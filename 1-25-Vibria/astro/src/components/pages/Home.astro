  ---
  import { getImageInfo } from "@wp/index.js";
  import Slide from "@components/Slide.astro";
  import { Picture } from "astro:assets";

  const { acf } = Astro.props.data;

  // Obtiene la imagen de difusión y su URL
  const imageData = acf.difusion_imagen
    ? await getImageInfo(acf.difusion_imagen)
    : null;
  const imageUrl =
    typeof imageData === "object" && imageData?.source_url
      ? imageData.source_url
      : "";
  const imageAlt =
    typeof imageData === "object" && imageData?.alt_text
      ? imageData.alt_text
      : "Imagen de canal de difusión";

  const domain = import.meta.env.PUBLIC_WP_DOMAIN;

  ---

  <Slide />
  <div class="flex flex-col md:flex-row">
    <div
      class="flex flex-col items-center justify-center bg-secondary px-20 py-8 text-center gap-4 md:w-1/2"
    >
      <div class="border border-white p-1">
        <p class="font-700 p md:text-[17px]">{acf.difusion_descripcion}</p>
      </div>

      {
        imageUrl && (
          <a href={acf.difusion_link}>
            <Picture
              formats={["webp", "avif", "jpeg"]}
              src={imageUrl}
              alt={imageAlt}
              width="60"
              height="60"
              class="rounded-lg transition-transform transform hover:scale-105"
            />
          </a>
        )
      }
    </div>

    <div class="flex flex-col items-center gap-4 py-4 bg-gray-100 w-full md:w-1/2">
      <h3 class="text-h3 text-700 text-primary text-center font-700">
        {acf.contacto_titulo}
      </h3>

      <form id="form-contacto" data-domain={domain} class="flex flex-col items-start gap-3 md:w-4/5 md:items-center">
        <input
          type="text"
          id="nom"
          name="nom"
          placeholder={acf.contacto_campo_nombre}
          required
          class="rounded-[20px] border border-secondary pl-2 pr-8 py-1 bg-white focus:outline-none focus:ring-1 focus:ring-secondary placeholder-secondary w-full"
        />

        <input
          type="email"
          id="correu"
          name="correu"
          placeholder={acf.contacto_campo_correo}
          required
          class="rounded-[20px] border border-secondary pl-2 pr-8 py-1 bg-white focus:outline-none focus:ring-1 focus:ring-secondary placeholder-secondary w-full"
        />

        <textarea
          id="missatge"
          name="missatge"
          placeholder={acf.contacto_campo_mensaje}
          required
          class="rounded-[10px] border border-secondary pl-2 pr-16 pt-1 pb-12 bg-white focus:outline-none focus:ring-1 focus:ring-secondary resize-none placeholder-secondary w-full md:pb-20"
        ></textarea>

        <button type="submit" class="btn">
          {acf.contacto_boton_texto}
        </button>

        <p id="form-message" class="text-sm mt-2 hidden"></p>

        <dialog id="loading-indicator" class="text-primary">
          <Picture
            formats={["webp", "avif", "jpeg", "svg", "gif"]}
            src="/images/loading.svg"
            alt="Loading"
            width="64"
            height="64"
          />
        </dialog>
      </form>
    </div>
  </div>

  <script type="module">


    const form = document.querySelector("#form-contacto");
    const messageElement = document.querySelector("#form-message");
    const loadingIndicator = document.querySelector("#loading-indicator");

    const domain = form.dataset.domain;

    form.addEventListener("submit", async (e) => {
      e.preventDefault(); // Evita que recargue la página

      const nombre = form.nom.value;
      const correo = form.correu.value;
      const mensaje = form.missatge.value;

      // Mostrar el indicador de carga
      loadingIndicator.showModal();

      try {
        const res = await fetch(
          `${domain}/wp-json/wp/v2/enviar-correo`,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ nombre, correo, mensaje }),
          }
        );

        const data = await res.json();

        if (res.ok && data.success) {
          // Mostrar mensaje de éxito
          messageElement.textContent = "¡Mensaje enviado correctamente!";
          messageElement.className = "text-green-600 mt-2";
          messageElement.classList.remove("hidden");
          form.reset();
        } else {
          // Mostrar mensaje de error
          messageElement.textContent =
            "Ocurrió un error al enviar el mensaje. Intenta de nuevo.";
          messageElement.className = "text-red-600 mt-2";
          messageElement.classList.remove("hidden");
        }
      } catch (err) {
        console.error(err);
        // Mostrar mensaje de error de conexión
        messageElement.textContent = "Error al conectar con el servidor.";
        messageElement.className = "text-red-600 mt-2";
        messageElement.classList.remove("hidden");
      } finally {
        // Ocultar el indicador de carga
        loadingIndicator.close();

        // Ocultar el mensaje después de 3 segundos
        setTimeout(() => {
          messageElement.classList.add("hidden");
        }, 5000);
      }
    });
  </script>
